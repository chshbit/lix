generate_manpage_gen = custom_target(
  input : meson.project_source_root() / 'doc/manual/generate-manpage.nix',
  output : 'generate-manpage.nix.gen.hh',
  command : [
    bash,
    '-c',
    'echo \'R"foo(\' | cat - @INPUT@ && echo \')foo"\'',
  ],
  capture : true,
)

utils_gen = custom_target(
  input : meson.project_source_root() / 'doc/manual/utils.nix',
  output : 'utils.nix.gen.hh',
  command : [
    bash,
    '-c',
    'echo \'R"foo(\' | cat - @INPUT@ && echo \')foo"\'',
  ],
  capture : true,
)

nix_sources = files(
  'add-to-store.cc',
  'app.cc',
  'build.cc',
  'bundle.cc',
  'cat.cc',
  'copy.cc',
  'daemon.cc',
  'derivation-add.cc',
  'derivation-show.cc',
  'derivation.cc',
  'develop.cc',
  'diff-closures.cc',
  'doctor.cc',
  'dump-path.cc',
  'edit.cc',
  'eval.cc',
  'flake.cc',
  'fmt.cc',
  'hash.cc',
  'log.cc',
  'ls.cc',
  'main.cc',
  'make-content-addressed.cc',
  'nar.cc',
  'optimise-store.cc',
  'path-from-hash-part.cc',
  'path-info.cc',
  'ping-store.cc',
  'prefetch.cc',
  'profile.cc',
  'realisation.cc',
  'registry.cc',
  'repl.cc',
  'run.cc',
  'search.cc',
  'show-config.cc',
  'sigs.cc',
  'store-copy-log.cc',
  'store-delete.cc',
  'store-gc.cc',
  'store-repair.cc',
  'store.cc',
  'upgrade-nix.cc',
  'verify.cc',
  'why-depends.cc',
)

nix = executable(
  'nix',
  nix_sources,
  generate_manpage_gen,
  utils_gen,
  nix2_commands_sources,
  dependencies : [
    liblixcmd,
    liblixutil,
    liblixstore,
    liblixexpr,
    liblixfetchers,
    liblixmain,
    boehm,
  ],
)
